cmdhistory=[";; Switching to reader.min-spit namespace" "(min-spit \\"src/reader/min-spit.clj\\")" "(use 'reader.min-spit)" "(min-spit \\"src/reader/min-spit.clj\\")" "(doc condp)" ";; Switching to reader.min-spit namespace" "(doc definterface)" "(definterface IOFactory\\r\\n(^java.io.BufferReader make-reader [this])\\r\\n(^java.io.BufferedWriter make-writer [this]))" "(definterface IOFactory\\r\\n(^java.io.BufferReader makeReader [this])\\r\\n(^java.io.BufferedWriter makeWriter [this]))" "(IOFactory)" "(defprotocol IOFactory\\r\\n\\"\u6C4E\u7528\u306E\u8AAD\u8FBC\u307F\uFF0F\u66F8\u8FBC\u307F\u3092\u5B9A\u7FA9\u3057\u305F\u30D7\u30ED\u30C8\u30B3\u30EB\\"\\r\\n(makeReader  [this] \\"Creates a BufferedReader.\\")\\r\\n(makeWriter  [this] \\"Creates a BufferedWriter.\\"))" "(extend InputStream\\r\\n  IOFactory\\r\\n  {\:makeReader  (fn [src] (-> src InputStreamReader. BufferedReader.))\\r\\n  {\:makeWriter  (fn [dst] (throw (IllegalArgumentException.\\r\\n\\"Can\u2019t open as an InputStream.\\")))})" "(extend InputStream\\r\\n  IOFactory\\r\\n  {\:makeReader  (fn [src] (-> src InputStreamReader. BufferedReader.))\\r\\n  \:makeWriter  (fn [dst] (throw (IllegalArgumentException.\\r\\n\\"Can\u2019t open as an InputStream.\\")))})" "use ('clojure.java.io\\n      )" "(deftype CryptoFilter [filename keystore password])" "(deftype CryptoVault [filename keystore password])" "(def filter (CryptoVault. \\"vault-file\\" \\"keystore\\" \\"toomanysecrets\\"))" "(def test-filter(CryptoVault. \\"vault-file\\" \\"keystore\\" \\"toomanysecrets\\"))" "(test-filter.filename)" "(str test-filter.filename)" "(.filename test-filter)" "(deftype CryptoFilter[filename keystore password])" "(def crypt-filter (CryptoFilter. \\"filter-file\\" \\"keystore\\" \\"password\\"))" "(class crypt-filter)" "(.filename crypt-filter)" "(.keystore crypt-filter)" "(.password crypt-filter)" "(str crypt-filter)" "(defprotocol Filter\\r\\n  (init-vault [filter])\\r\\n  (vault-output-stream [filter])\\r\\n  (vault-input-stream [filter]))" "(defprotocol Filter\\r\\n  (init-filter [filter])\\r\\n  (filter-output-stream [filter])\\r\\n  (filter-input-stream [filter]))" "(def crypt-filter (reader.crypto.CryptoFilter. \\"filter-file\\" \\"keystore\\" \\"password\\"))" "(.init-filter crypt-filter \\"Test\\")" "(init-filter crypt-filter \\"Test\\")" "(init-filter crypt-filter)" "(def vault (->CryptoVault \\"vault-file\\" \\"keystore\\" \\"toomanysecrets\\"))" "(def vault (->CryptoFilter \\"vault-file\\" \\"keystore\\" \\"toomanysecrets\\"))" "(def vault (->reader.crypto.CryptoFilter \\"vault-file\\" \\"keystore\\" \\"toomanysecrets\\"))" "(def vault (CryptoFilter. \\"vault-file\\" \\"keystore\\" \\"toomanysecrets\\"))" "(use 'reader.crypto.CryptoFilter)" "(use 'reader.crypto)" "(def vault (CryptoFilter. \\"vault-file\\" \\"keystore\\" \\"toomanysecrets\\"))" "(find Crypto*)" "(find CryptoFilter)" "(in-ns 'reader.crypto)" "(def vault (CryptoFilter. \\"vault-file\\" \\"keystore\\" \\"toomanysecrets\\"))" "(init-filter vault)" "(init-filter vault \\"Test\\")" "(init-filter \\"Test\\")" "(str vault)" "(.makeReader vault)" "(load-file \\"reader/crypto.clj\\")" "(load-file \\"src/reader/crypto.clj\\")" "(in-ns 'user)" "(def vault (reader.crypto/CryptoFilter. \\"vault-file\\" \\"keystore\\" \\"toomanysecrets\\"))" "(def vault (reader.crypto/CryptoFilter \\"vault-file\\" \\"keystore\\" \\"toomanysecrets\\"))" "(use reader.crypto/CryptoFilter as CryptoFilter)" "(load-file \\"src/reader/io.clj\\")" "(load-file \\"src/reader/crypto.clj\\")" "(def test-filter (CryptoFilter. \\"vault-file\\" \\"keystore\\" \\"toomanysecrets\\"))" "(import 'reader.crypto.CryptoFilter)" "(def test-filter (CryptoFilter. \\"filter-file\\" \\"keystore\\" \\"toomanysecrets\\"))" "(.init-filter test-filter)" "(str test-filter)" "(load-file \\"src/reader/io.clj\\")" "(load-file \\"src/reader/crypto.clj\\")" "(import 'reader.crypto.CryptoFilter)" "(def test-filter (CryptoFilter. \\"filter-file\\" \\"keystore\\" \\"toomanysecrets\\"))" "(init-filter test-filter)" "(test-filter)" "(str test-filter)" "(.init-filter test-filter)" "(load-file \\"src/reader/crypto.clj\\")" "(import 'reader.crypto.CryptoFilter)" "(def test-filter (->CryptoFilter \\"filter-file\\" \\"keystore\\" \\"toomanysecrets\\"))" "(def test-filter (CryptoFilter. \\"filter-file\\" \\"keystore\\" \\"toomanysecrets\\"))" "(.init-filter test-filter)" "(load-file \\"src/reader/min-slurp.clj\\")" "(load-file \\"src/reader/min-spit.clj\\")" "(min-slurp test-filter)" "(use 'reader.min-slurp)" "(min-slurp test-filter)" "(min-slurp test-filter \\"Test\\")" "(load-file \\"src/reader/min-slurp.clj\\")" "(use 'reader.min-slurp)" "(min-slurp test-filter \\"Test\\")" "(load-file \\"src/reader/io.clj\\")" "(load-file \\"src/reader/crypto.clj\\")" "(import 'reader.crypto.CryptoFilter)" "(def test-filter (CryptoFilter. \\"filter-file\\" \\"keystore\\" \\"toomanysecrets\\"))" "(.init-filter test-filter)" "(expectorate test-filter \\"This is a test of the CryptoFilter.\\")" "(use 'reader.io)" "(expectorate test-filter \\"This is a test of the CryptoFilter.\\")" "(load-file \\"src/reader/io.clj\\")" "(load-file \\"src/reader/crypto.clj\\")" "(import 'reader.crypto.CryptoFilter)" "(def test-filter (CryptoFilter. \\"filter-file\\" \\"keystore\\" \\"toomanysecrets\\"))" "(.init-filter test-filter)" "(use 'reader.io)" "(expectorate test-filter \\"This is a test of the CryptoFilter.\\")" "(makeWriter test-filter)" "(load-file \\"src/reader/io.clj\\")" "(load-file \\"src/reader/crypto.clj\\")" "(import 'reader.crypto.CryptoFilter)" "(def test-filter (CryptoFilter. \\"filter-file\\" \\"keystore\\" \\"toomanysecrets\\"))" "(.init-filter test-filter)" "(use 'reader.io)" "(expectorate test-filter \\"This is a test of the CryptoFilter.\\")" "(load-file \\"src/reader/io.clj\\")" "(load-file \\"src/reader/crypto.clj\\")" "(import 'reader.crypto.CryptoFilter)" "(def test-filter (CryptoFilter. \\"filter-file\\" \\"keystore\\" \\"toomanysecrets\\"))" "(.init-filter test-filter)" "(use 'reader.io)" "(expectorate test-filter \\"This is a test of the CryptoFilter.\\")" "(gulp test-filter)" "(defprotocol TestFactory\\r\\n  \\"\u6C4E\u7528\u306E\u8AAD\u8FBC\u307F\uFF0F\u66F8\u8FBC\u307F\u3092\u5B9A\u7FA9\u3057\u305F\u30D7\u30ED\u30C8\u30B3\u30EB\\"\\r\\n  (make-reader  [this] \\"Creates a BufferedReader.\\")\\r\\n  (make-writer  [this] \\"Creates a BufferedWriter.\\"))" "(load-file \\"src/reader/io.clj\\")" "(load-file \\"src/reader/crypto.clj\\")" "(import 'reader.crypto.CryptoFilter)" "(def test-filter (CryptoFilter. \\"filter-file\\" \\"keystore\\" \\"toomanysecrets\\"))" "(.init-filter test-filter)" "(min-slurp test-filter \\"This is a test of the CryptoFilter.\\")" "(use 'reader.io)" "(min-slurp test-filter \\"This is a test of the CryptoFilter.\\")" "(min-spit test-filter)" "(load-file \\"src/reader/io.clj\\")" "(load-file \\"src/reader/crypto.clj\\")" "(import 'reader.crypto.CryptoFilter)" "(use 'reader.io)" "(def test-filter (CryptoFilter. \\"filter-file\\" \\"keystore\\" \\"toomanysecrets\\"))" "(.init-filter test-filter)" "(spit test-filter \\"This is a test of the CryptoFilter using spit and slurp.\\")" "(load-file \\"src/reader/io.clj\\")" "(load-file \\"src/reader/crypto.clj\\")" "(import 'reader.crypto.CryptoFilter)" "(def test-filter (->CryptoFilter \\"filter-file\\" \\"keystore\\" \\"toomanysecrets\\"))" "(def test-filter (CryptoFilter. \\"filter-file\\" \\"keystore\\" \\"toomanysecrets\\"))" "(.init-filter test-filter)" "(use 'reader.io)" "(min-slurp test-filter \\"This is a test of the CryptoFilter.\\")" "(load-file \\"src/reader/io.clj\\")" "(load-file \\"src/reader/crypto.clj\\")" "(import 'reader.crypto.CryptoFilter)" "(def test-filter (CryptoFilter. \\"filter-file\\" \\"keystore\\" \\"toomanysecrets\\"))" "(.init-filter test-filter)" "(use 'reader.io)" "(min-slurp test-filter \\"This is a test of the CryptoFilter.\\")" "(min-spit test-filter)" "(spit test-filter \\"This is a test of the CryptoVault using spit and slurp.\\")" "(load-file \\"src/reader/io.clj\\")" "(load-file \\"src/reader/crypto.clj\\")" "(import 'reader.crypto.CryptoFilter)" "(def test-filter (CryptoFilter. \\"filter-file\\" \\"keystore\\" \\"toomanysecrets\\"))" "(.init-filter test-filter)" "(use 'reader.io)" "(min-spit test-filter \\"This is a test of the CryptoFilter.\\")" "(min-slurp test-filter)" "(slurp test-filter)" "(spit test-filter \\"This is a test of the CryptoVault using spit and slurp.\\")" "(slurp test-filter)" "(min-slurp test-filter)"]
eclipse.preferences.version=1
